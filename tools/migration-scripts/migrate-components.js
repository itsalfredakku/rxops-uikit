#!/usr/bin/env node

/**
 * Component Migration Script for RxOpsRestructuring
 * 
 * This script safely moves components to their new locations
 * based on the migration plan generated by component-analyzer.js
 */

const fs = require('fs');
const path = require('path');

function loadMigrationPlan() {
  const planPath = path.join(__dirname, 'migration-plan.json');
  
  if (!fs.existsSync(planPath)) {
    console.error('❌ Migration plan not found. Run component-analyzer.js first.');
    process.exit(1);
  }
  
  return JSON.parse(fs.readFileSync(planPath, 'utf8'));
}

function createDirectoryStructure(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`📁 Created directory: ${dirPath}`);
  }
}

function moveComponent(migration) {
  const { name, from, to } = migration;
  const fromPath = path.join(process.cwd(), from);
  const toPath = path.join(process.cwd(), to);
  
  if (!fs.existsSync(fromPath)) {
    console.warn(`⚠️  Source not found: ${fromPath}`);
    return false;
  }
  
  if (fs.existsSync(toPath)) {
    console.warn(`⚠️  Destination already exists: ${toPath}`);
    return false;
  }
  
  // Create destination directory
  createDirectoryStructure(path.dirname(toPath));
  
  // Move the component
  try {
    fs.renameSync(fromPath, toPath);
    console.log(`✅ Moved: ${name} → ${to}`);
    return true;
  } catch (error) {
    console.error(`❌ Failed to move ${name}:`, error.message);
    return false;
  }
}

function createIndexFiles() {
  const categories = {
    'src/core/atoms/index.ts': [],
    'src/core/molecules/index.ts': [],
    'src/core/organisms/index.ts': [],
    'src/core/layouts/index.ts': [],
    'src/healthcare/patient/index.ts': [],
    'src/healthcare/provider/index.ts': [],
    'src/healthcare/appointments/index.ts': [],
    'src/healthcare/medical/index.ts': [],
    'src/healthcare/emergency/index.ts': [],
    'src/healthcare/billing/index.ts': []
  };

  Object.keys(categories).forEach(indexPath => {
    const fullPath = path.join(process.cwd(), indexPath);
    const dir = path.dirname(fullPath);
    
    if (fs.existsSync(dir)) {
      const components = fs.readdirSync(dir)
        .filter(item => fs.statSync(path.join(dir, item)).isDirectory())
        .filter(item => !item.startsWith('.'));
      
      const exports = components.map(component => 
        `export { default as ${component.split('-').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join('')} } from './${component}';`
      ).join('\n');
      
      const content = `// Auto-generated index file for ${path.basename(dir)} components
${exports}
`;
      
      fs.writeFileSync(fullPath, content);
      console.log(`📝 Created index file: ${indexPath}`);
    }
  });
}

function updateMainIndex() {
  const mainIndexPath = path.join(process.cwd(), 'src/index.ts');
  const content = `// RxOps UIKit
// Main export file

// Core Components (Atomic Design)
export * from './core/atoms';
export * from './core/molecules';
export * from './core/organisms';
export * from './core/layouts';

// Healthcare Components (Domain-specific)
export * from './healthcare/patient';
export * from './healthcare/provider';
export * from './healthcare/appointments';
export * from './healthcare/medical';
export * from './healthcare/emergency';
export * from './healthcare/billing';

// Design System
export * from './design-system';

// Utilities
export * from './utils';

// Types
export type * from './types';
`;

  fs.writeFileSync(mainIndexPath, content);
  console.log('📝 Updated main index file');
}

function createBackup() {
  const backupDir = path.join(process.cwd(), 'backup-' + Date.now());
  const srcDir = path.join(process.cwd(), 'src');
  
  if (fs.existsSync(srcDir)) {
    fs.cpSync(srcDir, path.join(backupDir, 'src'), { recursive: true });
    console.log(`💾 Created backup at: ${backupDir}`);
    return backupDir;
  }
  
  return null;
}

function main() {
  console.log('🚀 Starting RxOpscomponent migration...\n');

  const migrationPlan = loadMigrationPlan();
  console.log(`📊 Migrating ${migrationPlan.totalComponents} components\n`);

  // Create backup
  const backupPath = createBackup();
  if (backupPath) {
    console.log(`💾 Backup created: ${backupPath}\n`);
  }

  let successful = 0;
  let failed = 0;

  // Migrate components
  migrationPlan.migrations.forEach(migration => {
    if (moveComponent(migration)) {
      successful++;
    } else {
      failed++;
    }
  });

  console.log('\n📝 Creating index files...');
  createIndexFiles();

  console.log('📝 Updating main index...');
  updateMainIndex();

  console.log('\n✨ Migration Summary:');
  console.log(`✅ Successful: ${successful}`);
  console.log(`❌ Failed: ${failed}`);
  console.log(`📊 Total: ${migrationPlan.totalComponents}`);

  if (failed > 0) {
    console.log('\n⚠️  Some migrations failed. Check the logs above.');
    console.log('💾 Restore from backup if needed:', backupPath);
  } else {
    console.log('\n🎉 All components migrated successfully!');
    console.log('🔄 Next: Run import-updater.js to update import statements');
  }
}

if (require.main === module) {
  main();
}

module.exports = { loadMigrationPlan, moveComponent, createIndexFiles };
